name: CI/CD Pipeline for Location Microservice

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 🏗️ Étape 1 : Build & Test
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: 📥 Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🔍 Vérifier les fichiers présents
        run: |
          pwd
          ls -al

      - name: 🔨 Compile le microservice Location
        working-directory: ./gestionlocation
        run: mvn compile

      - name: ✅ Exécuter les tests unitaires
        working-directory: ./gestionlocation
        run: mvn test

  # 📊 Étape 2 : Analyse de Qualité avec SonarCloud
  sonarqube:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=19236882_microauto

  # 🐳 Étape 3 : Build et Push Docker
  docker:
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Connexion à Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📦 Construire l'image Docker
        working-directory: ./gestionlocation
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/location-image:latest .

      - name: 📤 Push de l'image Docker
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/location-image:latest
